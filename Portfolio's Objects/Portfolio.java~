public class Portfolio{
// A class to represent a group of stocks owned by an investor along
// with a cash reserve to purchase more stocks. The owner and maximum
// number of stocks are fixed at construction time. Methods that
// mutate the Portfolio return boolean values indicate whether the
// operation was successful or not.
  private String owner;
  private int stockCount;
  private Stock stocks[];
  private double cash;
  
  public Portfolio(String owner, int maxStocks){
    // Construct a new portfolio that can hold the given maximum number
    // of stocks. The owner of the portfolio is the first
    // parameter. Initially the portfolio has no stocks and no cash in
    // it.
    this.owner = owner;
    this.stockCount = 0;
    this.cash = 0.0;
    this.stocks = new Stock[maxStocks];
  }
  
  public String getOwner(){
    // Retrieve the owner of the portfolio.
    this.owner = owner;
    return owner;
  }
  
  public double getCash(){
    // Return the amount of cash currently in the portfolio
    this.cash = cash;
    return cash;
  }
  
  public int getStockCount(){
    // Return how many stocks are currently stored in the array of
    // stocks tracked by the portfolio.
    this.stockCount = stockCount;
    return stockCount;
  }
  
  public boolean deposit(double amount){
    // Add the given amount to the cash in the portfolio and return
    // true.  If the amount given is negative, ignore the request and
    // return false.
    this.cash = cash;
    //this.amount = amount;
    if(amount<0){
      return false;
    }
    this.cash += amount;
    return true;
  }
  
  public boolean withdraw(double amount){
    // Deduct the given amount from the cash in portfolio and return
    // true.  If the amount is negative or is larger than the amount of
    // cash in the portfolio, ignore the request and return false.
    this.cash = cash;
    //this.amount = amount;
    if((amount<0) || (amount>cash)){
      return false;
    }
    this.cash = cash - amount;
    return true;
  }
  
  public double totalValue(){
    // Return the total value of all cash and stocks in the entire
    // portfolio.  Use a loop to compute the individual value of each
    // stock using and appropriate method. Add on the cash to total
    // before returning.
    this.stocks = stocks;
    this.cash = cash;
    int i;
    double total;
    double stockMoney = 0;
    for(i=0; i<stockCount; i++){
      stockMoney += stocks[i].getPrice()*stocks[i].getShares();
    }
    total = stockMoney + cash;
    return total;
  }
  
  public String toString(){
    // Create a string representation of the portfolio. An example of
    // the output format is below and includes must information in the
    // portfolio.  Use a loop over the stocks in the portfolio to create
    // the listing of stocks calling each stock's toString() method to
    // produce its string representation. Use of the String.format() to
    // format each line of the resulting string and append it to an
    // answer is a good approach.
    // 
    // EXAMPLE:
    // Portfolio of Gordon Gecko
    // Cash: $18734.20
    // 3 stocks
    //  Apple Inc. (AAPL): price: $166.89 shares: 50
    //  Alphabet Inc Class A (GOOGL): price: $1000.62 shares: 15
    //  Microsoft Corporation (MSFT): price: $79.12 shares: 100
    // Total value: $50000.00
    //
    // Note that the last line "Total value..." has a newline at the end
    // of it. A good strategy is to create an initial empty string then
    // append strings to it with +=. Each line has a newline "\n" at the
    // end of it.
    String beauty = new String();
    int i;
    this.stocks = stocks;
    double total = totalValue();
    beauty = String.format("Portfolio of %s\nCash: $%.2f\n%d stocks\n", owner, cash, stockCount);
    for(i=0; i<stockCount; i++){
      String name = stocks[i].getName();
      String symbol = stocks[i].getSymbol();
      double price = stocks[i].getPrice();
      int numShares = stocks[i].getShares();
      beauty += String.format(" %s (%s): price: $%.2f shares: %d\n", name, symbol, price, numShares);
    }
    beauty += String.format("Total value: $%.2f\n", total);
    return beauty;
  }
  
  public boolean addStock(String symbol, double price, String name){
    // Add a stock to the portfolio with the given symbol, price, and
    // name. The initial number of shares for the stock must be
    // 0. Ensure that the count of stocks tracked by the portfolio is
    // updated. Return true on a successful add.  If the count of stocks
    // is already at the maximum for the portfolio, ignore the add
    // request and return false.
    this.stockCount = stockCount;
    this.stocks = stocks;
    if(this.stockCount<this.stocks.length){ 
      this.stocks[stockCount] = new Stock(symbol, price, 0, name);
      this.stockCount++;
      return true;
    }
    return false;
  }
  
  public boolean buyShares(String symbol, int numShares){
    // Buy more shares a stock in the portfolio. Use a loop to locate
    // the stock with the given symbol.  Purchase more shares of the
    // stock using an appropriate method of the Stock class. Deduct the
    // cost of the purchase from the portfolio's cash. Return true on a
    // successful purchase.  If the cost of buying is larger than the
    // amount of cash in th portfolio, do not buy any shares and return
    // false. If no stock in the portfolio has the given symbol, return
    // false.
    int i;
    for(i=0; i<stockCount; i++){
      if (stocks[i].getSymbol().equals(symbol)){
        if(cash > stocks[i].getPrice()*numShares){
          cash = cash + stocks[i].buyMore(numShares);; 
          return true;
        }
        else if(cash < stocks[i].getPrice()*numShares){
          return false;
        }
      }
    }
      return false;
    }

  public boolean sellShares(String symbol, int numShares){
    // Sell off shares a stock in the portfolio. Use a loop to locate
    // the stock with the given symbol.  Sell off shares of the stock
    // using an appropriate method of the Stock class. Add the profit
    // from the sale to the portfolio's cash. Return true on a
    // successful sale.  If the numShares is larger than the number of
    // shares owned, ignore the sell request and return false. If no
    // stock in the portfolio has the given symbol, return false.
    int i;
    for(i=0; i<stockCount; i++){
      if (stocks[i].getSymbol().equals(symbol)){
        double profit = stocks[i].sellOff(numShares);
        if(profit == 0.0){
          return false;
        }
          cash = cash + profit; 
          return true;
        
      }
    }
    return false;
  }
  
}